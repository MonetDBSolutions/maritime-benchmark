-- Monet
-- Query 7: FAO areas intersected by ship trajectories
-- Takes 4 minutes with 0.0001
CREATE TABLE fao_trajectory_intersect AS
  SELECT mmsi, fid as fao_id
  FROM trajectory as q1
  JOIN fao_areas as q2
  ON st_intersectsgeographic(q1.geom,q2.geom)
  AND q2.f_subarea IN ('27.7','27.8');
-- Takes 40 secs with 0.0001
CREATE TABLE fao_trajectory_intersect AS
  SELECT mmsi, fid as fao_id
  FROM trajectory as q1
  JOIN fao_areas as q2
  ON st_intersectsgeographic(q1.geom,q2.geom)
  AND q2.f_division IN ('27.8.a','27.8.b','27.8.d','27.7.d','27.7.e','27.7.h','27.7.f','27.7.g','27.7.j');



-- Query 8: Distance between ship trajectories and europe maritime boundaries (Line-Line distance + transform)
CREATE TABLE trajectory_coastline_distance AS
  SELECT mmsi, q2.gid,
         st_distancegeographic(st_transform(q1.geom,4326),st_transform(q2.geom,4326)) as distance
  FROM trajectory as q1
  JOIN europe_maritime_boundaries as q2
  ON TRUE
  WHERE st_dwithingeographic(st_transform(q1.geom,4326),st_transform(q2.geom,4326),30000);

-- PSQL
-- Query 8: Distance between ship trajectories and europe maritime boundaries (Line-Line distance + transform)
CREATE TABLE trajectory_europe_distance AS
  SELECT mmsi, q2.gid,
         st_distance(q1.geom::Geography,st_transform(q2.geom,4326)::Geography) as distance
  FROM trajectory as q1
  JOIN europe_maritime_boundaries as q2
  ON TRUE
  WHERE st_dwithin(q1.geom::Geography,st_transform(q2.geom,4326)::Geography,30000);





CREATE TABLE trajectory_coastline_distance AS
  SELECT mmsi, q2.path as gid,
         st_distance(q1.geom::Geography,q2.geom::Geography) as distance
  FROM trajectory as q1
  JOIN st_dump((select geom from europe_coastline)) as q2
  ON q2.path = array[1]
  WHERE st_dwithin(q1.geom::Geography,q2.geom::Geography,30000);

-- Old queries
-- PSQL
CREATE TABLE distance_trajectory_port AS SELECT mmsi, libelle_po as port_name, st_distance(q1.geom::Geography,q2.geom::Geography, false) as distance FROM brittany_ports as q1 JOIN trajectory as q2 ON TRUE;
CREATE TABLE trajectory_close_to_port AS SELECT q1.mmsi as ship, q2.gid as port, st_distance(q1.geom::Geography,q2.geom::Geography) as distance FROM trajectory as q1 JOIN brittany_ports as q2 ON st_dwithin(q1.geom::Geography,q2.geom::Geography,500);
CREATE TABLE ships_stop_at_port AS SELECT libelle_po as port_name, mmsi, min(q2.t) as min_t, max(q2.t) as max_t, max(q2.t) - min(q2.t) as dur, min(st_distance(q1.geom::Geography,q2.geom::Geography)) as dist FROM brittany_ports as q1 INNER JOIN ais_dynamic as q2 ON q2.speed = 0 AND ST_DWithin(q1.geom::Geography,q2.geom::Geography,500) GROUP BY libelle_po, mmsi;

-- MonetDB
CREATE TABLE distance_trajectory_port AS SELECT mmsi, libelle_po as port_name, st_distancegeographic(q1.geom,q2.geom) as distance FROM brittany_ports as q1 JOIN trajectory as q2 ON TRUE;
CREATE TABLE trajectory_close_to_port AS SELECT q1.mmsi as ship, q2.gid as port, st_distancegeographic(q1.geom,q2.geom) as distance FROM trajectory as q1 JOIN brittany_ports as q2 ON st_dwithingeographic(q1.geom,q2.geom,500);
CREATE TABLE ships_stop_at_port AS SELECT libelle_po as port_name, mmsi, min(q2.t) as min_t, max(q2.t) as max_t, max(q2.t) - min(q2.t) as dur, min(st_distancegeographic(q1.geom,q2.geom)) as dist FROM brittany_ports as q1 INNER JOIN ais_dynamic as q2 ON q2.speed = 0 AND ST_DWithinGeographic(q1.geom,q2.geom,500) GROUP BY libelle_po, mmsi;
CREATE TABLE ships_fishing AS SELECT DISTINCT mmsi, shipname, total_duration_s FROM ( SELECT mmsi, SUM(duration_s) as total_duration_s FROM ( SELECT mmsi, MIN(t) AS min_t, MAX(t) AS max_t, MAX(t) - MIN(t) AS duration_s FROM (SELECT ROW_NUMBER() OVER (PARTITION BY mmsi ORDER BY rn) - rn AS grp, speed, mmsi, t FROM  (	SELECT mmsi, rn, speed, t FROM (	SELECT mmsi, speed, t, ROW_NUMBER() OVER (PARTITION BY mmsi ORDER BY t) AS rn	FROM ais_data.dynamic_ships	WHERE t >= str_to_timestamp('22-01-2016 00:00', '%d-%m-%Y %H:%M')	AND t < str_to_timestamp('23-01-2016 00:00', '%d-%m-%Y %H:%M')	AND mmsi < 999999999) AS q1 WHERE speed >= 2.5 AND speed <= 3.5) AS q2) AS q3 GROUP BY mmsi, grp ORDER  BY mmsi, grp ) as q4 WHERE q4.duration_s > INTERVAL '15' SECOND GROUP BY mmsi ) as q5 LEFT JOIN ais_data.static_ships as q6 ON q5.mmsi = q6.sourcemmsi;

-- Other queries
-- Calculate stops (MonetDB)
CREATE TABLE stop_begin AS
SELECT mmsi, t2 AS t_begin FROM segments
WHERE speed1 > 0.1 AND speed2 <= 0.1;

CREATE TABLE stop_end AS
SELECT mmsi, t1 AS t_end FROM segments
WHERE speed1 <= 0.1 AND speed2 > 0.1;

CREATE TABLE stops AS
SELECT q1.mmsi, q1.t_begin, q1.t_end, (q1.t_end - q1.t_begin) as duration_s
FROM (
	SELECT DISTINCT stop_begin.mmsi, t_begin, FIRST_VALUE(t_end) OVER (PARTITION by stop_begin.mmsi, t_begin ORDER BY t_end) as t_end
	FROM stop_begin
	INNER JOIN stop_end
	ON stop_begin.mmsi = stop_end.mmsi AND t_begin <= t_end
) AS q1;

select mmsi, stop_count, total_time from
(select mmsi, count(*) as stop_count, sum(duration_s) as total_time from stops group by mmsi) as q1
order by total_time;


-- Distance between all ships positions and ports (with a filter)
-- MonetDB
CREATE TABLE distance_ship_port AS SELECT mmsi, libelle_po as port_name, q2.t, st_distancegeographic(q1.geom,q2.geom) as distance FROM brittany_ports as q1 JOIN ais_dynamic as q2 ON q1.gid < 25;
-- PostgreSQL
CREATE TABLE distance_ship_port AS SELECT mmsi, libelle_po as port_name, q2.t, st_distance(q1.geom::Geography,q2.geom::Geography, false) as distance FROM brittany_ports as q1 JOIN ais_dynamic as q2 ON q1.gid < 25;